(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{473:function(e,t,r){"use strict";r.r(t);var i=r(53),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"什么是-fiber"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-fiber"}},[e._v("#")]),e._v(" 什么是 fiber?")]),e._v(" "),r("blockquote",[r("p",[e._v("Fiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering of the virtual DOM.")])]),e._v(" "),r("p",[e._v("A Fiber is work on a Component that needs to be done or was done. There can be more than one per component. "),r("br"),e._v("\nfiber 是指组件上将要完成或者已经完成的任务，每个组件可\n以 个或者多个。")]),e._v(" "),r("h2",{attrs:{id:"为什么需要-fiber"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-fiber"}},[e._v("#")]),e._v(" 为什么需要 fiber?")]),e._v(" "),r("ul",[r("li",[e._v("对于大型项目，组件树很大，这时候递归的成本就会很高，会造成主线程被持续占用，结果就是主线程上的布局、动画等周期性任务就无法立即得到处理，造成视觉上的卡顿，影响用户体验。")])]),e._v(" "),r("h2",{attrs:{id:"fiber-做了什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fiber-做了什么？"}},[e._v("#")]),e._v(" fiber 做了什么？")]),e._v(" "),r("ul",[r("li",[e._v("增量渲染（把渲染任务拆分成块，匀到多帧）")]),e._v(" "),r("li",[e._v("更新时能够暂停、终止、复用渲染任务")]),e._v(" "),r("li",[e._v("给不同类型的更新赋予优先级")]),e._v(" "),r("li",[e._v("并发方面新的基础能力")]),e._v(" "),r("li",[e._v("更流畅")])])])}),[],!1,null,null,null);t.default=n.exports}}]);